# -*- coding: utf-8 -*-
"""DNA sequencing for detecting E.Coli.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hYUGBx5As0Cc_ZlVccFrumiEFD3Ywnr6
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder
import pickle
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report, accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/molecular-biology/promoter-gene-sequences/promoters.data'
names = ['Class', 'id', 'Sequence']
data = pd.read_csv(url, names = names)

data.head(5)

data.shape

data.dtypes

# Refining and structuring the data

# Build our dataset using custom pandas dataframe
classes = data.loc[:,'Class']
classes.head()
print()
print(classes.value_counts())

# generate list of DNA sequence
sequence = list(data.loc[:, 'Sequence'])
sequence[-1]

#Remove tab from each sequence
dic = {}
for i, seq in enumerate(sequence):
    nucleotides = list(seq)
    nucleotides = [char for char in nucleotides if char != '\t']
    #append class assignment
    nucleotides.append(classes[i])

    dic[i] = nucleotides
list(dic[0])

# Convert Dict object into dataframe
df = pd.DataFrame(dic)
df.head()

# transpose dataframe into correct format
df = df.transpose()
df.head()

# Rename the 57th column as it is our classes
df.rename(columns = {57:'Class'}, inplace = True)

df.head()

temp = df.copy(deep=True)
temp = temp.drop(['Class'], axis = 1)

temp.head()

# Encoding using one-hot encoder:

enc = OneHotEncoder(handle_unknown='ignore')
enc.fit(temp)
print(enc.categories_)
df1 = enc.transform(temp).toarray()
del temp
# df1[1:3]

# Saving the one-hot encoder

with open("drive/MyDrive/EColi-encoder.pickle", "wb") as f:
    pickle.dump(enc, f)

# Loading the file later:
# encoder = pickle.load(f)
# data = encoder.transform(df).toarray()

df_new = pd.DataFrame(df1)
df_new.head()

# Fixing the classes column:

df["Class"] = df["Class"].replace(to_replace =["+"], value =1)
df["Class"] = df["Class"].replace(to_replace =["-"], value =0)
df_new["Classes"] = df['Class']
df_new.head()

#Encoding - Alternative
numerical_df = pd.get_dummies(df)
numerical_df.head()

# Training and Testing the Classification Algorithms

y = df_new['Classes'].values# numerical_df['Class'].values
X = df_new.drop(['Classes'], axis = 1).values# numerical_df.drop(['Class'], axis = 1).values

#define a seed for reproducibility
seed = 1

# Splitting data into training and testing data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = seed)

model = MLPClassifier(hidden_layer_sizes=(150,100,50), max_iter=300,activation = 'relu',solver='adam',random_state=1)

model.fit(X_train, y_train)
print(model.score(X_train, y_train))

#Predicting y for X_val
y_pred = model.predict(X_test)
model.score(X_test, y_test)

# Model evaluation
print(classification_report(y_test, y_pred))

#Importing Confusion Matrix
#Comparing the predictions against the actual observations in y_val
cm = confusion_matrix(y_pred, y_test)
sns.heatmap(cm, annot=True)

# Plotting graph for MLPClassifier

loss_values = model.loss_curve_
plt.plot(loss_values)
plt.show()

# save the model to disk

filename = 'drive/MyDrive/E-Coli_model.pickle'
pickle.dump(model, open(filename, 'wb'))

genome = "ttactagcaatacgcttgcgttcggtggttaagtatgtataatgcgcgggcttgtcg"
# genome_false = "ttaacattaataaataaggaggctctaatggcactcattagccaatcaatcaagaac"
genome_list = list(genome)
print(genome_list)
df_test = pd.DataFrame(genome_list)
df_test = df_test.transpose()

df.head()

encoder = pickle.load(open("drive/MyDrive/EColi-encoder.pickle", 'rb'))
data_test = encoder.transform(df_test).toarray()
print(model.predict(data_test))

type(model.predict(data_test)[0])